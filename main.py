import os
from pyrogram import Client, filters
import datetime
import json
import random
from pyrogram.filters import reply
from FusionBrain_AI import generate
import config
import keyboards
import base64

bot = Client(
    api_id=config.API_ID,
    api_hash=config.API_HASH,
    bot_token=config.BOT_TOKEN,
    name="my_bot",
)

def button_filter(button):
    async def func(_, __, msg):
        return msg.text.strip() == button.text.strip()
    return filters.create(func, "ButtonFilter", button=button)

if not os.path.exists("users.json"):
    with open("users.json", "w") as file:
        json.dump({}, file)

@bot.on_message(filters.command("start"))
async def start(bot, message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=keyboards.kb_main )
    await bot.send_sticker(message.chat.id,"CAACAgQAAxkBAAENGypnMjCCgA_6VdcplrIAAae7GeK2rjgAAvsPAAJ0UylSBpgo6K2GlCM2BA")
    try:
        with open("users.json", "r") as file:
            users = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        users = {}
    if str(message.from_user.id) not in users.keys():
        users[message.from_user.id] = 100
        with open("users.json", "w") as file:
            json.dump(users, file, indent=4)

@bot.on_message(filters.command("info") | button_filter(keyboards.btn_info))
async def info(bot, message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –¢—É—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ –º–æ–∂–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")

@bot.on_message(filters.command("image"))
async def image(bot, message):
    if len(message.text.split()) > 1:
        query = message.text.replace('/image', '')
        await message.reply_text(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}', –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ‚Ä¶")
        images = await generate(query)
        if images:
            image_data = base64.b64decode(images[0])
            img_num = random.randint(1 , 200)
            with open(f"images/image{img_num}.jpg", "wb") as file:
                file.write(image_data)
            await bot.send_photo(message.chat.id, f'images/image{img_num}.jpg', reply_to_message_id=message.id)
        else:
            await message.reply_text("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_to_message_id=message.id)
    else:
        await message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")

@bot.on_message(filters.command("time"))
async def time(bot, message):
    await message.reply(f"–¢–µ–∫—É—â–∏–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.datetime.now()}")

@bot.on_message(filters.command("games") | button_filter(keyboards.btn_games))
async def games(bot, message):
    await message.reply("–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É", reply_markup=keyboards.kb_games)

@bot.on_message(filters.command("quest") | button_filter(keyboards.btn_quest))
async def kwest(bot, message):
    await message.reply_text("—Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ–ª–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π –∏ –∑–∞–≥–∞–¥–æ–∫", reply_markup=keyboards.inline_kb_start_quest)

@bot.on_callback_query()
async def handle_query(bot,query):

    if query.data =="start_quest":
        await bot.answer_callback_query(query.id,
        text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–µ—Å—Ç –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ –ü–æ–∏—Å–∫–∏ –ó–∞—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ –°–æ–∫—Ä–æ–≤–∏—â–∞! ",
        show_alert=True)
        await query.message.reply_text("–¢—ã —Å—Ç–æ–∏—à—å –ø–µ—Ä–µ–¥ –¥–≤—É–º—è –¥–≤–µ—Ä—å–º–∏ .–ö–∞–∫—É—é –∏–∑ –Ω–∏—Ö –≤—ã–±–µ—Ä–µ—à—å?",reply_markup = keyboards.inline_kb_choice_door)
    elif query.data == 'left_door':
        await query.message.reply_text("T—ã –≤—Ö–æ–¥–∏—à—å –≤ –∫–æ–º–Ω–∞—Çy –∏ –≤–∏–¥–∏—à—å –∑–ª–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞! –£ —Ç–µ–±—è –µ—Å—Ç—å —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π: ", reply_markup=keyboards.inline_kb_left_door)
    elif query.data == 'right_door':
        await query.message.reply_text("–¢—ã –≤—Ö–æ–¥–∏—à—å –≤ –∫–æ–º–Ω–∞—Çy, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏!–¢–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–∫—Ä–æ–≤–∏—â–µ",reply_markup = keyboards.inline_kb_right_door)
    elif query.data == 'dragon':
        await bot.answer_callback_query(query.id, text="–¢—ã —Å—Ä–∞–∂–∞–µ—à—å—Å—è —Å –¥—Ä–∞–∫–æ–Ω–æ–º ,–Ω–æ –æ–Ω –æ–∫–∞–∑–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ.–¢—ã –ø–æ–≥–∏–±–∞–µ—à—å ‚ò†",show_alert=True)
    elif query.data == 'run':
        await bot.answer_callback_query(query.id, text="–¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è —É–±–µ–∂–∞—Ç—å ,–Ω–æ –¥—Ä–∞–∫–æ–Ω —Ç–µ–±—è –¥–æ–≥–æ–Ω—è–µ—Ç –∏ —É–±–∏–≤–∞–µ—Ç ‚ò†",show_alert=True)
    elif query.data == 'hide':
        await bot.answer_callback_query(query.id, text="–¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è –∏ –¥—Ä–∞–∫–æ–Ω —Ç–µ–±—è –Ω–µ —É–≤–∏–¥–µ–ª.–¢—ã –≤—ã–∂–∏–ªüòÉ",show_alert=True)
    elif query.data == 'gold_crown':
        await bot.answer_callback_query(query.id, text="–¢—ã –±–µ—Ä–µ—à—å –∑–æ–ª–æ—Ç—É—é –∫–æ—Ä–æ–Ω—É –∏ –≤—ã—Ö–æ–¥–∏—à—å –∏–∑ –∫–æ–º–Ω–∞—Ç—ã .–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!–¢—ã –≤—ã–∏–≥—Ä–∞–ª –∏–≥—Ä—ÉüòÉ!", show_alert=True)
    elif query.data == 'silver_dagger':
        await bot.answer_callback_query(query.id, text="–¢—ã –±–µ—Ä–µ—à—å —Å–µ—Ä–µ–±—Ä–µ–Ω–Ω—ã–π –∫–∏–Ω–∂–∞–ª –∏ –≤—ã—Ö–æ–¥–∏—à—å –∏–∑ –∫–æ–º–Ω–∞—Ç—ã.–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é ,–∫–∏–Ω–∂–∞–ª –Ω–µ —á–µ–≥–æ –Ω–µ —Å—Ç–æ–∏—Ç üòê", show_alert=True)
    elif query.data == 'old_book':
        await bot.answer_callback_query(query.id, text="–¢—ã –±–µ—Ä–µ—à—å —Å—Ç–∞—Ä—É—é –∫–Ω–∏–≥—É –∏ –≤—ã—Ö–æ–¥–∏—à—å –∏–∑ –∫–æ–º–Ω–∞—Ç—ã.–ö–Ω–∏–≥–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –º–∞–≥–∏—á–µ—Å–∫–æ–π!–¢—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å —Å—Ç–∞–Ω–∏—Ü—É –∏ –∏—Å—á–µ–∑–∞–µ—à—åüòï ",show_alert=True)
    await query.message.delete()

@bot.on_message(filters.command("back") | button_filter(keyboards.btn_back))
async def back(bot, message):
    await message.reply("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboards.kb_main)

@bot.on_message(filters.command("game") | button_filter(keyboards.btn_rps))
async def game(bot, message):
    try:
        with open("users.json", "r") as file:
            users = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        users = {}
    if users.get(str(message.from_user.id), 0) >= 10:
        await message.reply("–¢–≤–æ–π —Ö–æ–¥", reply_markup=keyboards.kb_rps)
    else:
        await message.reply(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤. –ù–∞ —Ç–≤–æ–µ–º —Å—á–µ—Ç—É {users.get(str(message.from_user.id), 0)}. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∏–≥—Ä—ã - 10")

@bot.on_message(filters.command("rang") | button_filter(keyboards.btn_rang))
async def rang(bot , message):
    try:

        with open("users.json", "r") as file:
            users = json.load(file)

        if not users:
            await message.reply("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç! –ü–æ—Ö–æ–∂–µ, –Ω–∏–∫—Ç–æ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
            return

        top_users = list(users.values())[:3]

        response = "–í–æ—Ç –ª—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
        response += "\n".join([f"{i + 1}) {user}" for i, user in enumerate(top_users)])

        await bot.send_message(message.chat.id, response)

    except FileNotFoundError:
        await message.reply("–§–∞–π–ª users.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
    except json.JSONDecodeError:
        await message.reply("–§–∞–π–ª users.json –ø–æ–≤—Ä–µ–∂–¥—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ!")

@bot.on_message(button_filter(keyboards.btn_rock) | button_filter(keyboards.btn_scissors) | button_filter(keyboards.btn_paper))
async def choice_rps(bot, message):
    try:
        with open("users.json", "r") as file:
            users = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        users = {}

    user = message.text
    pc = random.choice([keyboards.btn_rock.text, keyboards.btn_scissors.text, keyboards.btn_paper.text])

    if user == pc:
        await message.reply("–ù–∏—á—å—è")
    elif (user == keyboards.btn_rock.text and pc == keyboards.btn_scissors.text) or \
         (user == keyboards.btn_scissors.text and pc == keyboards.btn_paper.text) or \
         (user == keyboards.btn_paper.text and pc == keyboards.btn_rock.text):
        await message.reply(f"–¢—ã –≤—ã–∏–≥—Ä–∞–ª. –ë–æ—Ç –≤—ã–±—Ä–∞–ª {pc}", reply_markup=keyboards.kb_games)
        users[str(message.from_user.id)] = users.get(str(message.from_user.id), 0) + 10
    else:
        await message.reply(f"–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª. –ë–æ—Ç –≤—ã–±—Ä–∞–ª {pc}", reply_markup=keyboards.kb_games)
        users[str(message.from_user.id)] = users.get(str(message.from_user.id), 0) - 10

    with open("users.json", "w") as file:
        json.dump(users, file, indent=4)

try:
    bot.run()
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")